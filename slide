package com.example.demo

import androidx.compose.material3.AssistChip
import androidx.compose.material3.AssistChipDefaults
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.res.vectorResource


import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxHeight
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.layout.wrapContentHeight
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyHorizontalGrid
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.lazy.items
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountBox
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Build
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Phone
import androidx.compose.material3.BottomAppBar
import androidx.compose.material3.Button
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.demo.R





@Composable
fun Section1() {
    Row(
        modifier = Modifier
                        .fillMaxWidth()
                        .padding(10.dp),
                    horizontalArrangement = Arrangement.SpaceBetween,
                    verticalAlignment = Alignment.CenterVertically,
        ) {
        Column {

            Text(
                            text = "Good Morning,Krishna",
                            fontSize = 20.sp,
                            color = Color.White
            )
            Text(
                            text = "How is your night?",
                            color = Color.White
                        )
                    }
        Icon(
            imageVector = ImageVector.vectorResource(id = R.drawable.ic_search),
            contentDescription = null,
            tint = Color.White
        )

    }

}

            @OptIn(ExperimentalMaterial3Api::class)
            @Composable
            fun Section2() {
                val list = listOf("Vaibhav")
                LazyRow(
                    modifier = Modifier.fillMaxWidth(),
                    horizontalArrangement = Arrangement.spacedBy(20.dp)
                ) {
//        item {
//            Image(
//                modifier = Modifier
//                    .width(100.dp)
//                    .height(50.dp),
//                painter = painterResource(id =R.drawable.zoro ),
//                contentDescription = null
//            )
//        }

                    items(list) { stringObject ->
                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(horizontal = 10.dp),
                            horizontalArrangement = Arrangement.spacedBy(10.dp)
                        ) {


                            AssistChip(
                                colors = AssistChipDefaults.assistChipColors(containerColor = Color.Blue),
                                modifier = Modifier.height(50.dp),
                                onClick = { /*TODO*/ },
                                label = {
                                    Text(
                                        text = "Sound Sleep",
                                        color = Color.White
                                    )
                                },
                                border = AssistChipDefaults.assistChipBorder(borderColor = Color.Blue)
                            )
                            AssistChip(
                                colors = AssistChipDefaults.assistChipColors(containerColor = Color.Blue),
                                modifier = Modifier.height(50.dp),
                                onClick = { /*TODO*/ },
                                label = {
                                    Text(
                                        text = "Insomnia",
                                        color = Color.White
                                    )
                                }
                            )
                            AssistChip(

                                leadingIcon = {},
                                modifier = Modifier.height(50.dp),
                                colors = AssistChipDefaults.assistChipColors(containerColor = Color.Blue),
                                border = AssistChipDefaults.assistChipBorder(borderColor = Color.Blue),
                                onClick = { /*TODO*/ },
                                label = {
                                    Text(
                                        text = "Depression",
                                        color = Color.White
                                    )

                                }
                            )
                                        AssistChip(

                                        leadingIcon = {},
                                modifier = Modifier.height(50.dp),
                                colors = AssistChipDefaults.assistChipColors(containerColor = Color.Blue),
                                border = AssistChipDefaults.assistChipBorder(borderColor = Color.Blue),
                                onClick = { /*TODO*/ },
                                label = {
                                    Text(
                                        text = "Headache",
                                        color = Color.White
                                    )

                                }

                            )


                        }

                    }
                }
            }

            @Composable
            fun Section3() {

                val list = listOf("Vaibhav")

//                LazyRow(
//                    modifier = Modifier.fillMaxWidth(),
////                    verticalArrangement = Arrangement.spacedBy(10.dp)
//                    horizontalArrangement = Arrangement.spacedBy(10.dp)
//                ) {
////        item {
////            Image(
////                modifier = Modifier
////                    .width(100.dp)
////                    .height(50.dp),
////                painter = painterResource(id = R.drawable.zoro),
////                contentDescription = null
////            )
////        }
//
//                    items(list) { stringObject ->
//            Box (
//                modifier = Modifier
//                    .width(100.dp)
//                    .height(50.dp)
//                    .clip(RoundedCornerShape(15.dp))
//                    .background(color = Color.Green),
//                contentAlignment = Alignment.Center
//            ){
//                Text(
//                    text = stringObject,
//                    color = Color.Red,
//                    fontWeight = FontWeight.Bold,
//                    fontSize = 20.sp
//                )
//            }

                        Row(
                            modifier = Modifier
                                .fillMaxWidth()
                                .height(80.dp)
                                .clip(shape = RoundedCornerShape(15.dp))
                                .background(color = Color.Gray)
                                .padding(10.dp),
                            horizontalArrangement = Arrangement.SpaceBetween,
                            verticalAlignment = Alignment.CenterVertically
                        ) {
                            Column {

                                Text(
                                    text = "Daily Thought",
                                    fontSize = 20.sp,
                                    color = Color.White
                                )
                                Text(
                                    text = "Meditation",
                                    color = Color.White
                                )
                            }
                            Box(
                                modifier = Modifier
                                    .size(45.dp)
                                    .clip(shape = CircleShape)
                                    .background(color = Color.Blue),
                                contentAlignment = Alignment.Center
                            ) {
                                IconButton(
                                    onClick = { /*TODO*/ }
                                )
                                {
                                    Icon(
                                        modifier = Modifier.size(25.dp),
                                        imageVector = ImageVector.vectorResource(id = R.drawable.ic_play),
                                        contentDescription = null,
                                        tint = Color.White
                                    )

                                }

                            }
                        }
                   }

               // }
         //   }


            @Composable
            fun Section4() {
                Text(text = "Featured", fontSize = 20.sp, color = Color.White)
            }
//    val list = listOf("Vaibhav", "VIrender")
//
//    LazyHorizontalGrid(
//        rows = GridCells.Fixed(2),
//        horizontalArrangement = Arrangement.spacedBy(30.dp),
//        verticalArrangement = Arrangement.spacedBy(30.dp)
//    ) {
//        items(list) {stringObject ->
//            Box (
//                modifier = Modifier
//                    .width(100.dp)
//                    .height(50.dp)
//                    .clip(RoundedCornerShape(15.dp))
//                    .background(color = Color.Green),
//                contentAlignment = Alignment.Center
//            ){
//                Text(
//                    text = stringObject,
//                    color = Color.Red,
//                    fontWeight = FontWeight.Bold,
//                    fontSize = 20.sp
//                )
//            }

//        }
//    }
//}

            @Composable
            fun Section5Child(
                text: String,
                iconID: Int,
                backGroundColor: Color,
                modifier: Modifier = Modifier
            ) {
                Box(
                    modifier = modifier
                        .size(175.dp)
                        .clip(RoundedCornerShape(20.dp))
                        .background(color = backGroundColor)
                        .padding(20.dp)
                ) {
                    Text(
                        text = text,
                        fontSize = 20.sp,
                        modifier = Modifier.align(Alignment.TopStart)
                    )
                    androidx.compose.material3.Icon(
                        modifier = Modifier
                            .size(40.dp)
                            .align(Alignment.BottomStart),
                        imageVector = ImageVector.vectorResource(id = iconID),
                        contentDescription = null,
                        tint = Color.White
                    )
                    Button(
                        modifier = Modifier
                            .align(Alignment.BottomEnd)
                            .clip(shape = RoundedCornerShape(10.dp)),
                        onClick = { /*TODO*/ }) {
                        Text(
                            text = "Start",
                            fontSize = 10.sp
                        )
                    }
                }
            }

            @Composable
            fun Section5(

            ) {
                val list = listOf( "Luffy","kiki")
    LazyRow(
//        columns = GridCells.Fixed(2),
//        horizontalArrangement = Arrangement.spacedBy(10.dp),
//        verticalArrangement = Arrangement.spacedBy(10.dp)
//                LazyHorizontalGrid(
            modifier = Modifier.fillMaxWidth(),
//                    verticalArrangement = Arrangement.spacedBy(10.dp)
            horizontalArrangement = Arrangement.spacedBy(10.dp)
//                    modifier = Modifier.wrapContentHeight(),
//                    rows = GridCells.Fixed(2),
//                    horizontalArrangement = Arrangement.spacedBy(30.dp),
//                    verticalArrangement = Arrangement.spacedBy(30.dp)
                ){

                    items(list) { stringObject ->
//            Box (
//                modifier = Modifier
//                    .width(100.dp)
//                    .height(50.dp)
//                    .clip(RoundedCornerShape(15.dp))
//                    .background(color = Color.Green),
//                contentAlignment = Alignment.Center
//            ){
//                Text(
//                    text = stringObject,
//                    color = Color.Red,
//                    fontWeight = FontWeight.Bold,
//                    fontSize = 20.sp
//                )
//            }
                        Column(
                            modifier = Modifier.fillMaxSize(),
                        ) {
                            Row(
                                modifier = Modifier.fillMaxWidth().padding(horizontal = 5.dp),
                                horizontalArrangement = Arrangement.SpaceBetween,



                            ) {
                                Section5Child(
                                    text = "Sleep/nMeditation",
                                    iconID = R.drawable.ic_music,
                                    backGroundColor = Color.Green,
                                    )
                                Spacer(modifier = Modifier.width(5.dp))
                                Section5Child(
                                    text = "Tips for/nsleep",
                                    iconID = R.drawable.ic_videocam,
                                    backGroundColor = Color.Red,

                                    )
                            }
                            Spacer(modifier = Modifier.height(10.dp))
                            Row(
                                modifier = Modifier.fillMaxWidth().padding(horizontal = 5.dp),
                                horizontalArrangement = Arrangement.SpaceBetween
                            ) {
                                Section5Child(
                                    text = "Night Island",
                                    iconID = R.drawable.ic_moon,
                                    backGroundColor = Color.Cyan,
                                )
                                Spacer(modifier = Modifier.width(5.dp))
                                Section5Child(
                                    text = "Calming/nSounds",
                                    iconID = R.drawable.ic_headphone,
                                    backGroundColor = Color.Magenta,
                                )

                            }

                        }

                    }
                }
            }

            @OptIn(ExperimentalMaterial3Api::class)
            @Composable
            fun ScaffoldExample() {
                Scaffold(
                    topBar = {
                        TopAppBar(
                            title = {
                                Text(text = "Search")
                            },
                            colors = TopAppBarDefaults.mediumTopAppBarColors(containerColor = Color.Yellow)
                        )
                    },
                    floatingActionButton = {
                        FloatingActionButton(onClick = { /*TODO*/ }) {
                            Icon(imageVector = Icons.Filled.Add, contentDescription = null)
                        }
                    },
                    bottomBar = {
                        BottomAppBar(
                            containerColor = Color.DarkGray
                        ) {
                            Row(
                                modifier = Modifier.fillMaxWidth(),
                                horizontalArrangement = Arrangement.SpaceEvenly
                            ) {
                                Icon(
                                    modifier = Modifier.size(40.dp),
                                    imageVector = Icons.Filled.AccountBox,
                                    contentDescription = null,
                                    tint = Color.Magenta
                                )
                                Icon(
                                    modifier = Modifier.size(40.dp),
                                    imageVector = Icons.Filled.Build,
                                    contentDescription = null,
                                    tint = Color.Magenta
                                )
                                Icon(
                                    modifier = Modifier.size(40.dp),
                                    imageVector = Icons.Filled.Delete,
                                    contentDescription = null,
                                    tint = Color.Magenta
                                )
                                Icon(
                                    modifier = Modifier.size(40.dp),
                                    imageVector = Icons.Filled.Home,
                                    contentDescription = null,
                                    tint = Color.Magenta
                                )
                                Icon(
                                    modifier = Modifier.size(40.dp),
                                    imageVector = Icons.Filled.Phone,
                                    contentDescription = null,
                                    tint = Color.Magenta
                                )
                            }
                        }
                    }

                ) { scaffoldDefaulPadding ->
                    Column(
                        modifier = Modifier
                            .fillMaxSize()
                            .padding(scaffoldDefaulPadding),
                        verticalArrangement = Arrangement.Center,
                        horizontalAlignment = Alignment.CenterHorizontally
                    ) {
                        //Spacer(modifier = Modifier.height(90.dp))
                        Text(text = "I m inside scaffold body")
                        Spacer(modifier = Modifier.height(40.dp))

                        SurfaceExample()


                    }

                }
            }

            @Composable
            fun SurfaceExample() {
                Surface(
                    border = BorderStroke(width = 2.dp, color = Color.Yellow),
                    shadowElevation = 100.dp,
                    tonalElevation = 100.dp,
                    modifier = Modifier
                        .height(50.dp)
                        .width(60.dp)
                ) {
                    Box(
                        contentAlignment = Alignment.Center
                    ) {
                        Text(text = "Kris", color = Color.Black)

                    }
                }
            }






@Preview(showSystemUi = false, showBackground = false)
@Composable
fun Section1Preview() {
//    Section1()
//     Section2()
   Section3()
//   Section4()
    // Spacer(modifier = Modifier.height(20.dp))
//     Section5()
//  ScaffoldExample()
//  SurfaceExample()
}
.....................................................................................







package com.example.demo.ui.theme

import androidx.compose.foundation.BorderStroke
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.Row
import androidx.compose.foundation.layout.Spacer
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.fillMaxWidth
import androidx.compose.foundation.layout.height
import androidx.compose.foundation.layout.padding
import androidx.compose.foundation.layout.size
import androidx.compose.foundation.layout.width
import androidx.compose.foundation.lazy.LazyColumn
import androidx.compose.foundation.lazy.LazyRow
import androidx.compose.foundation.lazy.grid.GridCells
import androidx.compose.foundation.lazy.grid.LazyVerticalGrid
import androidx.compose.foundation.lazy.grid.items
import androidx.compose.foundation.lazy.items
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.AccountBox
import androidx.compose.material.icons.filled.Add
import androidx.compose.material.icons.filled.Build
import androidx.compose.material.icons.filled.Delete
import androidx.compose.material.icons.filled.Home
import androidx.compose.material.icons.filled.Phone
import androidx.compose.material3.BottomAppBar
import androidx.compose.material3.ExperimentalMaterial3Api
import androidx.compose.material3.FloatingActionButton
import androidx.compose.material3.Icon
import androidx.compose.material3.Scaffold
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.material3.TopAppBar
import androidx.compose.material3.TopAppBarDefaults
import androidx.compose.runtime.Composable
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.ui.unit.dp
import com.example.demo.Section1
import com.example.demo.Section2
import com.example.demo.Section3
import com.example.demo.Section4
import com.example.demo.Section5

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun ScaffoldExample() {
    Scaffold(
        topBar = {
            TopAppBar(
//                modifier = Modifier.size(30.dp),
                title = {
                    Text(
//                        modifier = Modifier.size(20.dp),
                        text = "Search")
                },
                colors = TopAppBarDefaults.mediumTopAppBarColors(containerColor = Color.Yellow)
            )
        },
        floatingActionButton = {
            FloatingActionButton(onClick = { /*TODO*/ }) {
                Icon(imageVector = Icons.Filled.Add, contentDescription = null)
            }
        },
//        bottomBar = {
//            BottomAppBar(
////                modifier = Modifier.size(30.dp),
//                containerColor = Color.DarkGray,
//
//            ) {
//                Row(
//                    modifier = Modifier.fillMaxSize(),
//                    horizontalArrangement = Arrangement.SpaceEvenly
//                ) {
//                    Icon(
//                        modifier = Modifier.size(40.dp),
//                        imageVector = Icons.Filled.AccountBox,
//                        contentDescription = null,
//                        tint = Color.Magenta
//                    )
//                    Icon(
//                        modifier = Modifier.size(20.dp),
//                        imageVector = Icons.Filled.Build,
//                        contentDescription = null,
//                        tint = Color.Magenta
//                    )
//                    Icon(
//                        modifier = Modifier.size(20.dp),
//                        imageVector = Icons.Filled.Delete,
//                        contentDescription = null,
//                        tint = Color.Magenta
//                    )
//                    Icon(
//                        modifier = Modifier.size(20.dp),
//                        imageVector = Icons.Filled.Home,
//                        contentDescription = null,
//                        tint = Color.Magenta
//                    )
//                    Icon(
//                        modifier = Modifier.size(20.dp),
//                        imageVector = Icons.Filled.Phone,
//                        contentDescription = null,
//                        tint = Color.Magenta
//                    )
//                }
//            }
//        }

    ) { scaffoldDefaulPadding ->

//        val list = listOf("Vaibhav",)
//        LazyVerticalGrid(

            LazyColumn (
////                modifier = Modifier.fillMaxHeight(),
//                verticalArrangement = Arrangement.spacedBy(90.dp)
////            modifier = Modifier.fillMaxWidth(),
////            horizontalArrangement = Arrangement.spacedBy(20.dp)
            modifier = Modifier.padding(scaffoldDefaulPadding),
//            columns = GridCells.Fixed(2),
//            horizontalArrangement = Arrangement.spacedBy(30.dp),
            verticalArrangement = Arrangement.spacedBy(10.dp)

        ) {
            item {


                Column(
                    modifier = Modifier,
//                        .fillMaxSize()
                       // .padding(scaffoldDefaulPadding),
                    verticalArrangement = Arrangement.Center,
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    //Spacer(modifier = Modifier.height(90.dp))
                    Column(
                        modifier = Modifier
//                            .fillMaxSize()
                            .background(color = Color.Black)
                            .padding(16.dp)
                    ) {
                        Section1()
                        Spacer(modifier = Modifier.height(10.dp))
                        Section2()
                        Spacer(modifier = Modifier.height(20.dp))
                        Section3()
                        Spacer(modifier = Modifier.height(20.dp))
                        Section4()
                        Spacer(modifier = Modifier.height(20.dp))
                        Section5()
                    }
//            Text(text = "I m inside scaffold body")
                    Spacer(modifier = Modifier.height(40.dp))

//                    SurfaceExample()


                }

//
//
            }
        }
    }
}

//@Composable
//fun SurfaceExample() {
//    Surface(
//        border = BorderStroke(width = 2.dp, color = Color.Yellow),
//        shadowElevation = 100.dp,
//        tonalElevation = 100.dp,
//        modifier = Modifier
//            .height(50.dp)
//            .width(60.dp)
//    ) {
//        Box(
//            contentAlignment = Alignment.Center
//        ) {
//            Text(text = "Kris", color = Color.Black)
//
//        }
//    }
//}


@Preview(showBackground = false, showSystemUi = false)
@Composable
fun ScaffoldExamplePreview()  {
    ScaffoldExample()
//    SurfaceExample()
}
